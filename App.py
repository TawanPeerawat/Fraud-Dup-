import streamlit as st
import numpy as np
from PIL import Image
import base64
import io
import google.generativeai as genai

# ‡∏≠‡πà‡∏≤‡∏ô API Key ‡∏à‡∏≤‡∏Å Streamlit secrets
try:
    GEMINI_API_KEY = st.secrets["GEMINI_API_KEY"]
except KeyError:
    GEMINI_API_KEY = None

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Streamlit
st.set_page_config(
    page_title="Image Similarity Checker",
    page_icon="üñºÔ∏è",
    layout="wide"
)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (Histogram Comparison)
def calculate_histogram_similarity(img1, img2):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å histogram ‡∏Ç‡∏≠‡∏á‡∏™‡∏µ"""
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array
    arr1 = np.array(img1)
    arr2 = np.array(img2)
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
    if arr1.shape != arr2.shape:
        img2_resized = img2.resize(img1.size)
        arr2 = np.array(img2_resized)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì histogram ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ channel
    hist1_r = np.histogram(arr1[:,:,0], bins=50, range=(0, 255))[0]
    hist1_g = np.histogram(arr1[:,:,1], bins=50, range=(0, 255))[0]
    hist1_b = np.histogram(arr1[:,:,2], bins=50, range=(0, 255))[0]
    
    hist2_r = np.histogram(arr2[:,:,0], bins=50, range=(0, 255))[0]
    hist2_g = np.histogram(arr2[:,:,1], bins=50, range=(0, 255))[0]
    hist2_b = np.histogram(arr2[:,:,2], bins=50, range=(0, 255))[0]
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì correlation coefficient
    corr_r = np.corrcoef(hist1_r, hist2_r)[0,1]
    corr_g = np.corrcoef(hist1_g, hist2_g)[0,1]
    corr_b = np.corrcoef(hist1_b, hist2_b)[0,1]
    
    # ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á 3 channels
    similarity = (corr_r + corr_g + corr_b) / 3
    
    # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ NaN values
    if np.isnan(similarity):
        similarity = 0.0
    
    return max(0, similarity)  # ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å pixel values
def calculate_pixel_similarity(img1, img2):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å pixel values ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á"""
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
    arr1 = np.array(img1)
    arr2 = np.array(img2.resize(img1.size))
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Mean Squared Error
    mse = np.mean((arr1 - arr2) ** 2)
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô similarity score (0-1)
    max_possible_mse = 255 ** 2
    similarity = 1 - (mse / max_possible_mse)
    
    return max(0, similarity)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini API
def get_ai_analysis(image1, image2, hist_score, pixel_score):
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key
        if not GEMINI_API_KEY:
            st.error("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Gemini API Key ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Streamlit Cloud")
            return get_fallback_response(hist_score, pixel_score)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Gemini API
        genai.configure(api_key=GEMINI_API_KEY)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á model
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt
        prompt = f"""
        ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:
        
        ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô:
        - Histogram Similarity: {hist_score:.4f} ({hist_score*100:.2f}%)
        - Pixel Similarity: {pixel_score:.4f} ({pixel_score*100:.2f}%)
        
        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡πà‡∏≤:
        1. ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏Å‡∏µ‡πà‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        2. ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£ (‡∏™‡∏µ, ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á, ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤, ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á)
        3. ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ
        4. ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        5. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
        
        ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ markdown format ‡πÅ‡∏•‡∏∞ emoji ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
        """
        
        # ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞ prompt ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gemini
        response = model.generate_content([prompt, image1, image2])
        
        return response.text
        
    except Exception as e:
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ fallback response
        st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini API: {str(e)}")
        return get_fallback_response(hist_score, pixel_score)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fallback response
def get_fallback_response(hist_score, pixel_score):
    overall_score = (hist_score + pixel_score) / 2
    
    fallback_response = f"""
    ## üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
    
    **‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°:** ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô **{overall_score*100:.1f}%**
    
    ### üé® ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏µ (Histogram: {hist_score*100:.1f}%)
    - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏µ‡πÉ‡∏ô‡∏†‡∏≤‡∏û
    - {"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏†‡∏≤‡∏û‡∏°‡∏µ‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô" if hist_score > 0.7 else "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏™‡∏µ‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á" if hist_score > 0.3 else "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≥ ‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å"}
    
    ### üñºÔ∏è ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Pixel (Pixel Similarity: {pixel_score*100:.1f}%)
    - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á pixel ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î
    - {"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô" if pixel_score > 0.7 else "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á" if pixel_score > 0.3 else "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≥ ‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å"}
    
    ### üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    - **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°:** {overall_score*100:.1f}%
    - **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏µ:** {hist_score*100:.1f}%
    - **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:** {pixel_score*100:.1f}%
    
    ### üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    {"‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å" if overall_score > 0.8 else "‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô" if overall_score > 0.5 else "‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô"}
    
    ---
    *‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ AI analysis*
    """
    
    return fallback_response

# Main App
def main():
    st.title("üñºÔ∏è Image Similarity Checker with AI Analysis")
    st.markdown("### ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ AI (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏á‡πà‡∏≤‡∏¢)")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API Key
    if not GEMINI_API_KEY:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Gemini API Key ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Streamlit Cloud")
        with st.expander("üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key"):
            st.markdown("""
            1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏õ (Settings)
            2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Secrets"
            3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ:
            ```
            GEMINI_API_KEY = "‡πÉ‡∏™‡πà_API_KEY_‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì_‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà"
            ```
            4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÅ‡∏≠‡∏õ
            """)
    else:
        st.success("‚úÖ Gemini API Key ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß")
    
    # Sidebar
    st.sidebar.header("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    
    analysis_method = st.sidebar.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå",
        ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "Histogram ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", "Pixel ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"]
    )
    
    # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ API Key
    with st.sidebar.expander("üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ API Key"):
        st.markdown("""
        1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà [Google AI Studio](https://aistudio.google.com/)
        2. ‡∏Ñ‡∏•‡∏¥‡∏Å "Get API Key"
        3. ‡∏™‡∏£‡πâ‡∏≤‡∏á API Key ‡πÉ‡∏´‡∏°‡πà
        4. ‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Streamlit Cloud
        """)
    
    # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    with st.sidebar.expander("‚ÑπÔ∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"):
        st.markdown("""
        **Histogram Similarity:**
        - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏µ‡πÉ‡∏ô‡∏†‡∏≤‡∏û
        - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÇ‡∏ó‡∏ô‡∏™‡∏µ
        
        **Pixel Similarity:**
        - ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤ pixel ‡∏ï‡∏£‡∏á‡πÜ
        - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å
        """)
    
    # File uploaders
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà 1")
        uploaded_file1 = st.file_uploader(
            "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏Å",
            type=['png', 'jpg', 'jpeg'],
            key="img1"
        )
        
    with col2:
        st.subheader("‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà 2")
        uploaded_file2 = st.file_uploader(
            "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á",
            type=['png', 'jpg', 'jpeg'],
            key="img2"
        )
    
    if uploaded_file1 is not None and uploaded_file2 is not None:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û
        col1, col2 = st.columns(2)
        
        with col1:
            image1 = Image.open(uploaded_file1).convert('RGB')
            st.image(image1, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà 1", use_column_width=True)
            
        with col2:
            image2 = Image.open(uploaded_file2).convert('RGB')
            st.image(image2, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà 2", use_column_width=True)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        if st.button("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô", type="primary"):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."):
                
                hist_score = None
                pixel_score = None
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Histogram similarity
                if analysis_method in ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "Histogram ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"]:
                    hist_score = calculate_histogram_similarity(image1, image2)
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Pixel similarity
                if analysis_method in ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "Pixel ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"]:
                    pixel_score = calculate_pixel_similarity(image1, image2)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                st.subheader("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                col1, col2, col3 = st.columns(3)
                
                if hist_score is not None:
                    with col1:
                        st.metric(
                            "Histogram Similarity",
                            f"{hist_score:.4f}",
                            f"{hist_score*100:.2f}%"
                        )
                
                if pixel_score is not None:
                    with col2:
                        st.metric(
                            "Pixel Similarity",
                            f"{pixel_score:.4f}",
                            f"{pixel_score*100:.2f}%"
                        )
                
                if hist_score is not None and pixel_score is not None:
                    overall_score = (hist_score + pixel_score) / 2
                    with col3:
                        st.metric(
                            "Overall Similarity",
                            f"{overall_score:.4f}",
                            f"{overall_score*100:.2f}%"
                        )
                
                # Progress bars
                if hist_score is not None:
                    st.subheader("üìà Visual Progress")
                    st.progress(hist_score, text=f"Histogram: {hist_score*100:.1f}%")
                
                if pixel_score is not None:
                    st.progress(pixel_score, text=f"Pixel: {pixel_score*100:.1f}%")
                
                # AI Analysis
                st.subheader("ü§ñ AI Analysis")
                
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û..."):
                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini API analysis
                    ai_analysis = get_ai_analysis(
                        image1, 
                        image2, 
                        hist_score or 0, 
                        pixel_score or 0
                    )
                    
                    st.markdown(ai_analysis)
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ
                with st.expander("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ"):
                    st.write("**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà 1:**")
                    st.write(f"- ‡∏Ç‡∏ô‡∏≤‡∏î: {image1.size}")
                    st.write(f"- ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏µ: {image1.mode}")
                    
                    st.write("**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà 2:**")
                    st.write(f"- ‡∏Ç‡∏ô‡∏≤‡∏î: {image2.size}")
                    st.write(f"- ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏µ: {image2.mode}")
                    
                    st.write("**‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:**")
                    st.write("- Histogram Similarity: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏µ")
                    st.write("- Pixel Similarity: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤ pixel ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á")
                    st.write("- AI Analysis: Google Gemini 1.5 Flash")

if __name__ == "__main__":
    main()
