import streamlit as st
import numpy as np
from PIL import Image
import google.generativeai as genai

# ==============================
# Page Configuration
# ==============================
st.set_page_config(
    page_title="Image Similarity Checker with Gemini AI", 
    page_icon="üñºÔ∏è",
    layout="wide"
)

st.title("üñºÔ∏è Image Similarity Checker")
st.markdown("### ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ Gemini AI")

# ==============================
# Gemini API Key: ‡πÉ‡∏™‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
# ==============================
try:
    genai.configure(api_key="AIzaSyDhcBaFpk3YqRJtb6kLfQhbJSnGoklha8o")
    model = genai.GenerativeModel("gemini-2.0-flash-lite")
    st.success("Gemini API Key successfully configured!")
except Exception as e:
    st.error(f"Error setting up the Gemini model: {e}")
    st.stop()

# ==============================
# Session State Initialization
# ==============================
if "analysis_history" not in st.session_state:
    st.session_state.analysis_history = []

if "uploaded_images" not in st.session_state:
    st.session_state.uploaded_images = {"image1": None, "image2": None}

# ==============================
# Helper Functions
# ==============================
def calculate_basic_similarity(img1, img2):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ numpy"""
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
    arr1 = np.array(img1)
    arr2 = np.array(img2.resize(img1.size))
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Mean Squared Error
    mse = np.mean((arr1 - arr2) ** 2)
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô similarity score (0-1)
    max_possible_mse = 255 ** 2
    similarity = 1 - (mse / max_possible_mse)
    
    return max(0, similarity)

def calculate_color_similarity(img1, img2):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏µ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"""
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏µ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏û
    avg_color1 = np.mean(np.array(img1), axis=(0, 1))
    avg_color2 = np.mean(np.array(img2), axis=(0, 1))
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Euclidean distance
    color_distance = np.sqrt(np.sum((avg_color1 - avg_color2) ** 2))
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô similarity (0-1)
    max_distance = np.sqrt(3 * (255 ** 2))  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    similarity = 1 - (color_distance / max_distance)
    
    return max(0, similarity)

def calculate_histogram_similarity(img1, img2):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å histogram ‡∏Ç‡∏≠‡∏á‡∏™‡∏µ"""
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array
    arr1 = np.array(img1)
    arr2 = np.array(img2.resize(img1.size))
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì histogram ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ channel
    hist1_r = np.histogram(arr1[:,:,0], bins=50, range=(0, 255))[0]
    hist1_g = np.histogram(arr1[:,:,1], bins=50, range=(0, 255))[0]
    hist1_b = np.histogram(arr1[:,:,2], bins=50, range=(0, 255))[0]
    
    hist2_r = np.histogram(arr2[:,:,0], bins=50, range=(0, 255))[0]
    hist2_g = np.histogram(arr2[:,:,1], bins=50, range=(0, 255))[0]
    hist2_b = np.histogram(arr2[:,:,2], bins=50, range=(0, 255))[0]
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì correlation coefficient
    corr_r = np.corrcoef(hist1_r, hist2_r)[0,1] if len(set(hist1_r)) > 1 and len(set(hist2_r)) > 1 else 0
    corr_g = np.corrcoef(hist1_g, hist2_g)[0,1] if len(set(hist1_g)) > 1 and len(set(hist2_g)) > 1 else 0
    corr_b = np.corrcoef(hist1_b, hist2_b)[0,1] if len(set(hist1_b)) > 1 and len(set(hist2_b)) > 1 else 0
    
    # ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á 3 channels
    similarity = (corr_r + corr_g + corr_b) / 3
    
    # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ NaN values
    if np.isnan(similarity):
        similarity = 0.0
    
    return max(0, similarity)

# ==============================
# UI Layout
# ==============================

# ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏≠‡∏õ
with st.expander("‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏ô‡∏µ‡πâ"):
    st.markdown("""
    **Image Similarity Checker** ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ AI ‡∏à‡∏≤‡∏Å Google Gemini ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
    
    **‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:**
    - üîç **‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô**: Basic, Color, ‡πÅ‡∏•‡∏∞ Histogram Similarity
    - ü§ñ **AI Analysis**: ‡πÉ‡∏ä‡πâ Gemini AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    - üìä **‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î**: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å
    
    **‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**
    1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û 2 ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    2. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô"
    3. ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏à‡∏≤‡∏Å AI
    """)

# File uploaders
st.subheader("üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")

col1, col2 = st.columns(2)

with col1:
    st.markdown("**üì∑ ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà 1**")
    uploaded_file1 = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏Å",
        type=['png', 'jpg', 'jpeg', 'gif', 'bmp', 'webp'],
        key="img1",
        help="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå: PNG, JPG, JPEG, GIF, BMP, WebP"
    )
    
with col2:
    st.markdown("**üì∑ ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà 2**")
    uploaded_file2 = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á",
        type=['png', 'jpg', 'jpeg', 'gif', 'bmp', 'webp'],
        key="img2",
        help="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå: PNG, JPG, JPEG, GIF, BMP, WebP"
    )

# ==============================
# Image Processing and Display
# ==============================
if uploaded_file1 is not None and uploaded_file2 is not None:
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
    try:
        image1 = Image.open(uploaded_file1).convert('RGB')
        image2 = Image.open(uploaded_file2).convert('RGB')
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô session state
        st.session_state.uploaded_images["image1"] = image1
        st.session_state.uploaded_images["image2"] = image2
        
    except Exception as e:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: {str(e)}")
        st.stop()
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û
    st.subheader("üñºÔ∏è ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    col1, col2 = st.columns(2)
    
    with col1:
        st.image(image1, caption=f"‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà 1: {uploaded_file1.name}", use_column_width=True)
        st.caption(f"‡∏Ç‡∏ô‡∏≤‡∏î: {image1.size[0]} √ó {image1.size[1]} px")
        
    with col2:
        st.image(image2, caption=f"‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà 2: {uploaded_file2.name}", use_column_width=True)
        st.caption(f"‡∏Ç‡∏ô‡∏≤‡∏î: {image2.size[0]} √ó {image2.size[1]} px")
    
    # ‡∏õ‡∏∏‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    st.markdown("---")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button(
            "üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Gemini AI", 
            type="primary", 
            use_container_width=True
        ):
            # ==============================
            # Analysis Process
            # ==============================
            
            if model:
                try:
                    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
                    with st.spinner("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ Gemini AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û..."):
                        
                        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                        basic_score = calculate_basic_similarity(image1, image2)
                        color_score = calculate_color_similarity(image1, image2)
                        histogram_score = calculate_histogram_similarity(image1, image2)
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                        st.subheader("‚ö° ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô")
                        
                        col1, col2, col3, col4 = st.columns(4)
                        with col1:
                            st.metric(
                                "üîß Basic Similarity",
                                f"{basic_score:.3f}",
                                f"{basic_score*100:.1f}%"
                            )
                        
                        with col2:
                            st.metric(
                                "üé® Color Similarity", 
                                f"{color_score:.3f}",
                                f"{color_score*100:.1f}%"
                            )
                        
                        with col3:
                            st.metric(
                                "üìä Histogram Similarity", 
                                f"{histogram_score:.3f}",
                                f"{histogram_score*100:.1f}%"
                            )
                        
                        with col4:
                            overall_basic = (basic_score + color_score + histogram_score) / 3
                            st.metric(
                                "‚≠ê Average",
                                f"{overall_basic:.3f}",
                                f"{overall_basic*100:.1f}%"
                            )
                        
                        # Progress bars
                        st.progress(basic_score, text=f"Basic: {basic_score*100:.1f}%")
                        st.progress(color_score, text=f"Color: {color_score*100:.1f}%")
                        st.progress(histogram_score, text=f"Histogram: {histogram_score*100:.1f}%")
                        
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gemini
                        prompt = f"""
                        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:

                        ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô:
                        - Basic Similarity Score: {basic_score:.4f} ({basic_score*100:.2f}%)
                        - Color Similarity Score: {color_score:.4f} ({color_score*100:.2f}%)
                        - Histogram Similarity Score: {histogram_score:.4f} ({histogram_score*100:.2f}%)
                        - Overall Score: {overall_basic:.4f} ({overall_basic*100:.2f}%)

                        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:

                        1. **‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°**: ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

                        2. **‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î**:
                           - ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?
                           - ‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
                           - ‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?

                        3. **‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ**:
                           - ‡∏™‡∏µ ‡πÅ‡∏•‡∏∞‡πÇ‡∏ó‡∏ô‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?
                           - ‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏û?
                           - ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û?

                        4. **‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô**: ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ?

                        5. **‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥**: ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

                        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Markdown ‡πÅ‡∏•‡∏∞ Emoji ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
                        ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
                        """
                        
                        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini API
                        response = model.generate_content([prompt, image1, image2])
                        ai_analysis = response.text
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå AI
                        st.subheader("ü§ñ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏î‡∏¢ Gemini AI")
                        st.markdown(ai_analysis)
                        
                        # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
                        analysis_record = {
                            "timestamp": st.session_state.get("current_time", "Unknown"),
                            "basic_score": basic_score,
                            "color_score": color_score,
                            "histogram_score": histogram_score,
                            "overall_score": overall_basic,
                            "ai_analysis": ai_analysis
                        }
                        st.session_state.analysis_history.append(analysis_record)
                        
                except Exception as e:
                    error_message = f"Error processing request: {str(e)}"
                    st.error(f"‚ùå {error_message}")
                    
                    # Fallback response
                    st.subheader("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
                    basic_score = calculate_basic_similarity(image1, image2)
                    color_score = calculate_color_similarity(image1, image2)
                    overall_score = (basic_score + color_score) / 2
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Basic Similarity", f"{basic_score:.3f}", f"{basic_score*100:.1f}%")
                    with col2:
                        st.metric("Color Similarity", f"{color_score:.3f}", f"{color_score*100:.1f}%")
                    with col3:
                        st.metric("Overall", f"{overall_score:.3f}", f"{overall_score*100:.1f}%")
                    
                    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ AI Analysis ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
            else:
                st.error("‚ùå Gemini model is not available")

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    with st.expander("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üì∑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà 1:**")
            st.write(f"- ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: {uploaded_file1.name}")
            st.write(f"- ‡∏Ç‡∏ô‡∏≤‡∏î: {image1.size[0]} √ó {image1.size[1]} pixels")
            st.write(f"- ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏µ: {image1.mode}")
            st.write(f"- ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: {uploaded_file1.size:,} bytes")
            
        with col2:
            st.markdown("**üì∑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà 2:**")
            st.write(f"- ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: {uploaded_file2.name}")
            st.write(f"- ‡∏Ç‡∏ô‡∏≤‡∏î: {image2.size[0]} √ó {image2.size[1]} pixels")
            st.write(f"- ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏µ: {image2.mode}")
            st.write(f"- ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: {uploaded_file2.size:,} bytes")
        
        st.markdown("**üî¨ ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:**")
        st.write("- **Basic Similarity:** Mean Squared Error + Similarity Conversion")
        st.write("- **Color Similarity:** Average Color Comparison + Euclidean Distance")
        st.write("- **Histogram Similarity:** Color Distribution Correlation Analysis")
        st.write("- **AI Analysis:** Google Gemini 1.5 Flash Vision Model")

else:
    # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
    st.info("üëÜ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û 2 ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
    
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    with st.expander("üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"):
        st.markdown("""
        ### ‡πÅ‡∏≠‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
        
        1. **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏û‡∏ã‡πâ‡∏≥** - ‡∏´‡∏≤‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô
        2. **‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏†‡∏≤‡∏û** - ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏†‡∏≤‡∏û‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏°‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô
        3. **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏û** - ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î
        4. **‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤** - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢
        
        ### ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
        - ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10MB ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        - ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏π‡∏á‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        - AI ‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ ‡∏™‡∏µ ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
        """)

# ==============================
# Analysis History (Optional)
# ==============================
if st.session_state.analysis_history:
    with st.expander(f"üìà ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ({len(st.session_state.analysis_history)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)"):
        for i, record in enumerate(reversed(st.session_state.analysis_history)):
            st.markdown(f"**‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {len(st.session_state.analysis_history) - i}**")
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Basic", f"{record['basic_score']:.3f}")
            with col2:
                st.metric("Color", f"{record['color_score']:.3f}")
            with col3:
                st.metric("Histogram", f"{record['histogram_score']:.3f}")
            with col4:
                st.metric("Overall", f"{record['overall_score']:.3f}")
            st.markdown("---")
